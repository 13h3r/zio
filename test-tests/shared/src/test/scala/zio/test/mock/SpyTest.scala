package zio.test.mock

import zio.{ Managed, UIO, UManaged, ZIO }
import zio.test.Assertion._
import zio.test._
import zio.test.mock.Expectation._
import zio.test.mock.ServiceMock.MethodsImpl
import zio.test.mock.{ Expectation, Method, Mock, Mockable }

//src part
trait Service {
  def a(): UIO[String]

  def b(in: String): UIO[Int]
}

//tst part
object ServiceMock {

  //everything here should be autogenerated
  trait Methods {
    def a: Method[Service, Unit, String]
    def b: Method[Service, String, Int]
  }

  object MethodsImpl extends Methods {
    object a extends Method[Service, Unit, String]
    object b extends Method[Service, String, Int]
  }

  val mock: Mockable[Service] = (mock: Mock) =>
    new Service {
      override def a(): UIO[String]        = mock.apply(MethodsImpl.a)
      override def b(in: String): UIO[Int] = mock.apply(MethodsImpl.b, in)
    }

  def setupMock(setup: Methods => Expectation[Service, Nothing, Any]): Managed[Nothing, Service] =
    setup(MethodsImpl).managedEnv(mock)

  def setupSpy(setup: Methods => Expectation[Service, Nothing, Any]): UIO[(Service, Spy[Service])] =
    setup(MethodsImpl).spy(mock)
}

object SpyServiceSpec
    extends DefaultRunnableSpec(
      suite("Spy spec")(
        testM("Mock Example") {
          ServiceMock.setupMock { methods =>
            (methods.a returns value("test")) *>
              (methods.b(equalTo("test")) returns value(1))
          }.use(service => {
            for {
              aResult <- service.a()
              bResult <- service.b(aResult)
            } yield assert(bResult, equalTo(1))
          })
        },
        testM("Spy Example") {
          val spyIO = ServiceMock.setupSpy { methods =>
            (methods.a returns value("test")) *>
              (methods.b(anything) returns value(1))
          }

          for {
            spyResult             <- spyIO
            (service, serviceSpy) = spyResult
            aResult               <- service.a()
            bResult               <- service.b(aResult)
            aCalls                <- serviceSpy.allCalls(MethodsImpl.a)
          } yield {
            assert(bResult, equalTo(1)) &&
            assert(aCalls.head._2, equalTo(aResult))
          }
        }
      )
    )
